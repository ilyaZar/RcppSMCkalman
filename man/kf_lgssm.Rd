% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/01_kf_FFBS.R
\name{kf_lgssm}
\alias{kf_lgssm}
\title{Runs a Kalman forward filter and backward smoother}
\usage{
kf_lgssm(
  yt,
  zt,
  ut,
  A,
  B,
  C,
  D,
  Q,
  R,
  P00,
  x00,
  z00,
  n_sim = 1,
  n_sim_jsd = 1,
  MFD = TRUE,
  JSD = TRUE
)
}
\arguments{
\item{yt}{a matrix or vector of measurements (observations)}

\item{zt}{a matrix or vector of linear covariates of the latent state process}

\item{ut}{a matrix or vector of linear covariates of the measurement process}

\item{A}{autoregressive state process matrix (if univariate: autocorrelation)}

\item{B}{linear covariate effects from \code{zt} on the measurements}

\item{C}{linear effects from latent state process on the measurements}

\item{D}{linear covariate effects from \code{ut} on the measurements}

\item{Q}{VCM of the latent state process}

\item{R}{VCM of the measurement process variance}

\item{P00}{initial XXX matrix}

\item{x00}{initial/starting value for latent states (\code{t = 0})}

\item{z00}{initial value of regressors (\code{t = 0})}

\item{n_sim}{number of estimation/simulation runs for forward filtering}

\item{n_sim_jsd}{number of estimation/simulation runs for backward smoothing}

\item{MFD}{logical; if \code{TRUE}, then the marginal filtering density is
computed}

\item{JSD}{logical; if \code{TRUE}, then the joint smoothing density is
computed}
}
\value{
a named list of 4:
  \itemize{
    \item{kf_marginal_filtering_density: a list of length \code{n_sim} each
       containing the marginal filtering density for the whole time series}
    \item{kf_VCM_mfd: the intermediate \code{P_{tt}} matrices, i.e. the
       marginal filtering VCM estimates, see \code{Details} }
    \item{kf_joint_smoothing_density: a list of length \code{n_sim_jsd} each
       containing the joint smoothing density for the whole time series}
    \item{kf_VCM_jsd: the intermediate \code{J_{tt}} matrices, i.e. the
       joint smoothing VCM estimates see \code{Details} }
  }
}
\description{
Runs a Kalman forward filter and backward smoother
}
